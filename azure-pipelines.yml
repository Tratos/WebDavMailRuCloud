# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  tags:
    include:
    - '1.*'
    - '2.*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactNetCoreName: 'WebDAVCloudMailRu-$(Build.SourceBranchName)-dotNetCore30.zip'
  artifactNetFrameworkName: 'WebDAVCloudMailRu-$(Build.SourceBranchName)-dotNet48.zip'
  artifactMonoName: 'WebDAVCloudMailRu-$(Build.SourceBranchName)-dotNet48.zip'


steps:
- task: NuGetToolInstaller@0

#=============================================================================================================

# - task: VSBuild@1
#   displayName: .NET Build
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#     vsVersion: '16.0'
#     msbuildArgs: '/t:"Restore;Build" /p:Configuration="Release" /p:Platform="Any CPU" /p:CopyOutputSymbolsToPublishDirectory=false'

# - task: Bash@3
#   displayName: .NET artifacts clean
#   inputs:
#     targetType: 'inline'
#     script: 'rm WDMRC.Console/bin/Release/net48/*.pdb
#     && rm -f WDMRC.Console/bin/Release/net48/Microsoft.*.dll
#     && rm -f WDMRC.Console/bin/Release/net48/netstandard.dll'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item $(Build.ArtifactStagingDirectory)\release.info.json
      $content = @"
        {
          "version" : "$(Build.SourceBranchName)", 
          "filenames" : 
          {
             "netcore" : "$(artifactNetCoreName)",
             "netframework" : "$(artifactNetFrameworkName)",
             "mono" : "$(artifactMonoName)"
          }
        }
      "@
      Set-Content -Path $(Build.ArtifactStagingDirectory)\release.info.json -Value $content

# - task: ArchiveFiles@2
#   displayName: .NET artifacts archive to WebDAVCloudMailRu-$(Build.SourceBranchName)-dotNet48.zip
#   inputs:
#     rootFolderOrFile: 'WDMRC.Console/bin/Release/net48/'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactNetFrameworkName)'
#     replaceExistingArchive: true

#=============================================================================================================

# - task: DotNetCoreCLI@2
#   displayName: .NETCore publish to zip
#   inputs:
#     command: 'publish' 
#     projects: 'WDMRC.Console/WDMRC.Console.csproj'
#     publishWebProjects: false # Required when command == Publish
#     arguments: '--configuration $(BuildConfiguration) --framework netcoreapp3.0'

# - task: Bash@3
#   displayName: .NETCore copy artifact to WebDAVCloudMailRu-$(Build.SourceBranchName)-dotNetCore30.zip
#   inputs:
#     targetType: 'inline'
#     script: 'cp WDMRC.Console/bin/Release/netcoreapp3.0/publish.zip ''$(Build.ArtifactStagingDirectory)''/$(artifactNetCoreName)'



#=============================================================================================================

# - task: GitHubRelease@0
#   displayName: Publish artifacts to github
#   inputs:
#     gitHubConnection: YaRGithubAzure
#     repositoryName: '$(Build.Repository.Name)' 
#     action: 'create' # Options: create, edit, delete
#     target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
#     tagSource: 'auto' # Required when action == Create# Options: auto, manual


#=============================================================================================================

#- task: CmdLine@2
#  inputs:
#    script: 'tree $(Build.SourcesDirectory) /F'

- task: CmdLine@2
  inputs:
    script: 'tree $(Build.ArtifactStagingDirectory) /F'

- task: CmdLine@2
  inputs:
    script: 'type $(Build.ArtifactStagingDirectory)\release.info.json'

